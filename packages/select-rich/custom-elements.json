{
  "schemaVersion": "0.1.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "./index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LionOptions",
          "declaration": {
            "name": "LionOptions",
            "package": "@lion/listbox"
          }
        },
        {
          "kind": "js",
          "name": "LionOption",
          "declaration": {
            "name": "LionOption",
            "package": "@lion/listbox"
          }
        },
        {
          "kind": "js",
          "name": "LionSelectRich",
          "declaration": {
            "name": "LionSelectRich",
            "module": "./src/LionSelectRich.js"
          }
        },
        {
          "kind": "js",
          "name": "LionSelectInvoker",
          "declaration": {
            "name": "LionSelectInvoker",
            "module": "./src/LionSelectInvoker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./lion-option.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "./lion-options.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "./lion-select-invoker.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-select-invoker",
          "declaration": {
            "name": "LionSelectInvoker",
            "module": "./src/LionSelectInvoker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./lion-select-rich.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-select-rich",
          "declaration": {
            "name": "LionSelectRich",
            "module": "./src/LionSelectRich.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./src/LionSelectInvoker.js",
      "declarations": [
        {
          "kind": "class",
          "name": "LionSelectInvoker",
          "superclass": {
            "name": "LionButton",
            "package": "@lion/button"
          },
          "attributes": [
            {
              "name": "selectedElement",
              "fieldName": "selectedElement"
            },
            {
              "name": "readonly",
              "fieldName": "readOnly"
            },
            {
              "name": "single-option",
              "fieldName": "singleOption"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "selectedElement",
              "privacy": "public",
              "type": {
                "text": "LionOption | null"
              },
              "description": "The option element that is currently selected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "privacy": "public",
              "description": "When the connected LionSelectRich instance is readOnly,\nthis should be reflected in the invoker as well",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "singleOption",
              "privacy": "public",
              "description": "When the connected LionSelectRich instance has only one option,\nthis should be reflected in the invoker as well",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_contentWrapperNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__handleKeydown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "connectedCallback",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "disconnectedCallback",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_contentTemplate",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_noSelectionTemplate",
              "privacy": "public",
              "description": "To be overriden for a placeholder, used when `hasNoDefaultSelected` is true on the select rich"
            },
            {
              "kind": "method",
              "name": "_beforeTemplate",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "public"
            }
          ],
          "tagName": "lion-select-invoker"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionSelectInvoker",
          "declaration": {
            "name": "LionSelectInvoker",
            "module": "./src/LionSelectInvoker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./src/LionSelectRich.js",
      "declarations": [
        {
          "kind": "class",
          "name": "LionSelectRich",
          "events": [
            {
              "name": "blur",
              "type": {
                "text": "Event"
              }
            }
          ],
          "mixins": [
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@lion/core"
            },
            {
              "name": "OverlayMixin",
              "package": "@lion/overlays"
            }
          ],
          "superclass": {
            "name": "LionListbox",
            "package": "@lion/listbox"
          },
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "navigateWithinInvoker",
              "privacy": "public",
              "type": {
                "text": "Boolean"
              },
              "description": "When invoker has focus, up and down arrow keys changes active state of listbox,\nwithout opening overlay.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "interactionMode",
              "privacy": "public",
              "type": {
                "text": "'windows/linux'|'mac'|'auto'"
              },
              "description": "Aligns behavior for 'selectionFollowFocus' and 'navigateWithinInvoker' with\nplatform. When 'auto' (default), platform is automatically detected",
              "default": "'auto'"
            },
            {
              "kind": "field",
              "name": "singleOption",
              "privacy": "public",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_invokerNode",
              "privacy": "protected",
              "type": {
                "text": "LionSelectInvoker"
              }
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "connectedCallback",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "disconnectedCallback",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "requestUpdateInternal",
              "privacy": "public",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "public",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues "
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "privacy": "public",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "LionOption & FormControlHost"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "Number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "privacy": "public",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormRegisteringHost"
                  },
                  "description": "the child element (field)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "public",
              "description": "In the select disabled options are still going to a possible value for example\nwhen prefilling or programmatically setting it."
            },
            {
              "kind": "method",
              "name": "_onFormElementsChanged",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__toggleInvokerDisabled",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__syncInvokerElement",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__setupInvokerNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__invokerOnClick",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__invokerOnBlur",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__setupInvokerNodeEventListener",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__teardownInvokerNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_defineOverlayConfig",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_noDefaultSelectedInheritsWidth",
              "privacy": "public",
              "description": "With no selected element, we should override the inheritsReferenceWidth in most cases.\nBy default, we will set it to 'min', and then set it back to what it was initially when\nsomething is selected.\nAs a subclasser you can override this behavior."
            },
            {
              "kind": "method",
              "name": "__overlayBeforeShow",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__overlayOnShow",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__overlayOnHide",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_setupOverlayCtrl",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_teardownOverlayCtrl",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_alignInvokerWidth",
              "privacy": "public",
              "description": "Align invoker width with content width\nMake sure display is not set to \"none\" while calculating the content width"
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_overlayInvokerNode",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_overlayContentNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__onKeyUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "the keydown event object"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__blockListShowDuringTransition",
              "privacy": "public",
              "description": "Normally, when textbox gets focus or a char is typed, it opens listbox.\nIn transition phases (like clicking option) we prevent this."
            }
          ],
          "attributes": [
            {
              "name": "navigate-within-invoker",
              "fieldName": "navigateWithinInvoker"
            },
            {
              "name": "interaction-mode",
              "fieldName": "interactionMode"
            },
            {
              "name": "single-option",
              "fieldName": "singleOption"
            }
          ],
          "tagName": "lion-select-rich"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionSelectRich",
          "declaration": {
            "name": "LionSelectRich",
            "module": "./src/LionSelectRich.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./test/demos.screenshots-test.js",
      "declarations": [],
      "exports": []
    }
  ]
}